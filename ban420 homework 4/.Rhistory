share_reject_normal = NA)
df_tweedie_normal
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
library(tidyverse)
# Creating a function to simulate the sample mean with N, mu and sigman
simulate_sample_mean <- function(N, mu = 0, sigma = 1) {
# Creating sample data by simulating a normal distribution from the given mean and sd
sample_data <- rnorm(N, mean = mu, sd = sigma)
# Returning the mean of the sample data by adding mean()
return(mean(sample_data))
}
# Creating a function to simulate the sample mean with N, mu and sigman
simulate_sample_mean <- function(N, mu = 0, sigma = 1) {
# Creating sample data by simulating a normal distribution from the given mean and sd
sample_data <- rnorm(N, mean = mu, sd = sigma)
# Returning the mean of the sample data by adding mean()
return(mean(sample_data))
}
# Examples to see how the precision of the sample mean gets better with more observations
simulate_sample_mean(10)
simulate_sample_mean(100)
simulate_sample_mean(1000)
# Defining variable M
M <- 20
# Creating a vector with M length and NA elements
sample_mean <- rep(NA, M)
# For loop for to create x sample means from the simulated sample mean
for(i in 1:M) {
sample_mean[i] <- simulate_sample_mean(10)
}
sample_mean
# Calculating the standard deviation of the sample mean
sd_sample_mean <- sd(sample_mean)
sd_sample_mean
# Theoretical value
theoretical_value <- 1/sqrt(10)
theoretical_value
# Creating the data frame with N, st_dev and sigma
# I also included the Theoretical column straight into the tibble
sample_variance <- tibble(N = seq(10, 200, by = 10),
st_dev = NA,
sigma = 1,
theoretical = sigma/sqrt(N))
head(sample_variance)
M <- 100
rows <- nrow(sample_variance)
for(i in 1:rows) {
# Generating the M sample means for the different N values
current_N <- sample_variance$N[i]
sample_means <- replicate(M, simulate_sample_mean(current_N))
# Generating the sd of the M sample means
sample_variance$st_dev[i] <- sd(sample_means)
}
head(sample_variance)
# Creating a graph with two lines
# One improvement would be to add labels to the two lines
graph <- sample_variance %>%
ggplot(aes(x = N)) +
geom_line(aes(y = st_dev),color = "red", size = 1.5) +
geom_line(aes(y = theoretical), color = "black", size = 1) +
labs(
title = "Observed vs Theoretical Standard Deviation",
x = "N",
y = "Standard Deviation"
) +
theme_classic()
graph
library(tweedie)
# N = 10
rtweedie(n = 10, mu = 10000, phi = 1000, power = 1.9)
# N = 100 000
x <- rtweedie(n = 100000, mu = 10000, phi = 1000, power = 1.9)
mean(x)
# t-test
N <- 10000
true_mu <- 10000
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
# This function simulates tweedie distributed data with the sample size N,
# and performs a t-test against a mean of 10 000
# It returns the p-value from the t-test.
simTweedieTest <- function(N) {
# Simulating the data
sample_data <- rtweedie(N, mu = 10000, phi = 100, power = 1.9)
# Running the t-test on the simulated data
result <- t.test(sample_data, mu = 10000)
# Returning the p-value
return(result$p.value)
}
# P-value for N = 10 000
simTweedieTest(10000)
# This function runs the tweedie data simulation and t-test M times for
# a sample size of N. It returns the percentage of tests where the p-value
# was less than the alpha
MTweedieTests <- function(M, N, alpha) {
# Empty vector for p-values
p_values <- numeric(M)
# For loop running the simT function M number of times
for (i in 1:M) {
p_values[i] <- simTweedieTest(N)
}
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Simplified version of the same task by using replicate
MTweedieTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simTweedieTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Creating the data frame for tweedie data
df_tweedie <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject = NA)
df_tweedie
# Setting the alpha
alpha <- 0.05
# Creating the for loop with df$ references
for(i in 1:nrow(df_tweedie)) {
df_tweedie$share_reject[i] <- MTweedieTests(df_tweedie$N[i],
df_tweedie$M[i], alpha)
}
df_tweedie
# Creating a figure to comment on the validity of the t-test and sample size
ggplot(data = df_tweedie, aes(x = N, y = share_reject)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# Creating the same function as above, but for normal d data
simNormalTest <- function(N) {
# Simulating the data
sample_normal_data <- rnorm(N, mean = 10000, sd = 1)
# Running the t-test on the simulated data
result_normal <- t.test(sample_normal_data, mu = 10000)
return(result_normal$p.value)
}
# P-value for N = 10 000
simNormalTest(10000)
# Creating the same function as above, but for normal d data
MNormalTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simNormalTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MNormalTests(10, 100, 0.05)
# Creating a new data frame with one column for each share reject
df_tweedie_normal <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject_tweedie = NA,
share_reject_normal = NA)
df_tweedie_normal
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# We can see that the t-test works as expected for the normal distributed data
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
View(df_tweedie_normal)
library(tidyverse)
# Creating a function to simulate the sample mean with N, mu and sigman
simulate_sample_mean <- function(N, mu = 0, sigma = 1) {
# Creating sample data by simulating a normal distribution from the given mean and sd
sample_data <- rnorm(N, mean = mu, sd = sigma)
# Returning the mean of the sample data by adding mean()
return(mean(sample_data))
}
# Examples to see how the precision of the sample mean gets better with more observations
simulate_sample_mean(10)
simulate_sample_mean(100)
simulate_sample_mean(1000)
# Defining variable M
M <- 20
# Creating a vector with M length and NA elements
sample_mean <- rep(NA, M)
# For loop for to create x sample means from the simulated sample mean
for(i in 1:M) {
sample_mean[i] <- simulate_sample_mean(10)
}
sample_mean
# Calculating the standard deviation of the sample mean
sd_sample_mean <- sd(sample_mean)
sd_sample_mean
# Theoretical value
theoretical_value <- 1/sqrt(10)
theoretical_value
# Creating the data frame with N, st_dev and sigma
# I also included the Theoretical column straight into the tibble
sample_variance <- tibble(N = seq(10, 200, by = 10),
st_dev = NA,
sigma = 1,
theoretical = sigma/sqrt(N))
head(sample_variance)
M <- 100
rows <- nrow(sample_variance)
for(i in 1:rows) {
# Generating the M sample means for the different N values
current_N <- sample_variance$N[i]
sample_means <- replicate(M, simulate_sample_mean(current_N))
# Generating the sd of the M sample means
sample_variance$st_dev[i] <- sd(sample_means)
}
head(sample_variance)
# Creating a graph with two lines
# One improvement would be to add labels to the two lines
graph <- sample_variance %>%
ggplot(aes(x = N)) +
geom_line(aes(y = st_dev),color = "red", size = 1.5) +
geom_line(aes(y = theoretical), color = "black", size = 1) +
labs(
title = "Observed vs Theoretical Standard Deviation",
x = "N",
y = "Standard Deviation"
) +
theme_classic()
graph
library(tweedie)
# N = 10
rtweedie(n = 10, mu = 10000, phi = 1000, power = 1.9)
# N = 100 000
x <- rtweedie(n = 100000, mu = 10000, phi = 1000, power = 1.9)
mean(x)
# t-test
N <- 10000
true_mu <- 10000
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
# This function simulates tweedie distributed data with the sample size N,
# and performs a t-test against a mean of 10 000
# It returns the p-value from the t-test.
simTweedieTest <- function(N) {
# Simulating the data
sample_data <- rtweedie(N, mu = 10000, phi = 100, power = 1.9)
# Running the t-test on the simulated data
result <- t.test(sample_data, mu = 10000)
# Returning the p-value
return(result$p.value)
}
# P-value for N = 10 000
simTweedieTest(10000)
# This function runs the tweedie data simulation and t-test M times for
# a sample size of N. It returns the percentage of tests where the p-value
# was less than the alpha
MTweedieTests <- function(M, N, alpha) {
# Empty vector for p-values
p_values <- numeric(M)
# For loop running the simT function M number of times
for (i in 1:M) {
p_values[i] <- simTweedieTest(N)
}
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Simplified version of the same task by using replicate
MTweedieTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simTweedieTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Creating the data frame for tweedie data
df_tweedie <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject = NA)
df_tweedie
# Setting the alpha
alpha <- 0.05
# Creating the for loop with df$ references
for(i in 1:nrow(df_tweedie)) {
df_tweedie$share_reject[i] <- MTweedieTests(df_tweedie$N[i],
df_tweedie$M[i], alpha)
}
df_tweedie
# Creating a figure to comment on the validity of the t-test and sample size
ggplot(data = df_tweedie, aes(x = N, y = share_reject)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# Creating the same function as above, but for normal d data
simNormalTest <- function(N) {
# Simulating the data
sample_normal_data <- rnorm(N, mean = 10000, sd = 1)
# Running the t-test on the simulated data
result_normal <- t.test(sample_normal_data, mu = 10000)
return(result_normal$p.value)
}
# P-value for N = 10 000
simNormalTest(10000)
# Creating the same function as above, but for normal d data
MNormalTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simNormalTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MNormalTests(10, 100, 0.05)
# Creating a new data frame with one column for each share reject
df_tweedie_normal <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject_tweedie = NA,
share_reject_normal = NA)
df_tweedie_normal
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
setwd("C:/Users/sebas/OneDrive/1. 7. Semester/BAN400/parallel-computing-SebastianJohansen1/ban420 homework 4")
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
library(magrittr)
library(tidyverse)
simDat <-
function(N, type, mu) {
if (type == "tweedie") {
return(rtweedie(
N,
mu = mu,
phi = 100,
power = 1.9
))
}
if (type == "normal") {
return(rnorm(N, mean = mu))
}
else{
stop("invalid distribution")
}
}
# Next, the test. Note, we use mu two places:
# both for the data simulation and as the null.
simTest <-
function(N, type, mu) {
t.test(simDat(N = N,
type = type,
mu = mu),
mu = mu)$p.value
}
# Running many tests is almost the same as before.
# Here the mean is hard coded in, as we're not
# going to change it.
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
# We can now repeat the same analysis as before,
# but for both the tweedie and the normal:
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
for (i in 1:nrow(df)) {
print(i)
df$share_reject[i] <-
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
}
# As you see, with normally distributed data, N can
# be very small and the t-test is fine. With a tweedie,
# "large enough" can be many thousands. If we try
# different distributions or parameterizations, we might
# also get different results.
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = .05) +
theme_bw()
